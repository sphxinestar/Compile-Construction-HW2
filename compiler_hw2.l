/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
char buf[255];

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, sizeof(buf) - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit	    [0-9]
letter	    [a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id	    {letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     {CONCAT return ADD; }
"-" 	{CONCAT return SUB; }
"*" 	{CONCAT return MUL; }
"/" 	{CONCAT return DIV; }
"%"     {CONCAT return MOD; }
"++"    {CONCAT return INC; }
"--"    {CONCAT return DEC; }

 /* Relational */
">"	{CONCAT return MT; }
"<"	{CONCAT return LT; }
">="	{CONCAT return MTE; }
"<="	{CONCAT return LTE; }
"=="	{CONCAT return EQ; }
"!="	{CONCAT return NE; }

 /* Assignment */
"="	{CONCAT return ASGN; }
"+="	{CONCAT return ADDASGN; }
"-="	{CONCAT return SUBASGN; }
"*="	{CONCAT return MULASGN; }
"/="	{CONCAT return DIVASGN; }
"%="	{CONCAT return MODASGN; }

 /* Logical */
"&&"	{CONCAT return AND; }
"||"	{CONCAT return OR; }
"!"	{CONCAT return NOT; }

 /* Delimiters */
"("	{CONCAT return LB; }
")"	{CONCAT return RB; }
"{"	{CONCAT return LCB; }/*@@*/
"}"	{CONCAT return RCB; }/*@@*/
"["	{CONCAT return LSB; }
"]"	{CONCAT return RSB; }
","	{CONCAT return COMMA; }

 /* Print Keywords */	
"print"	{CONCAT return PRINT; }

 /* Condition and Loop Keywords */
"if"	{CONCAT return IF; }
"else"	{CONCAT return ELSE; }
"for"	{CONCAT return FOR; }
"while"	{CONCAT return WHILE; }

 /* Declaration Keywords */
"void"		{CONCAT yylval.string = strdup(yytext); return VOID; }
"int"		{CONCAT yylval.string = strdup(yytext); return INT; }
"float"  	{CONCAT yylval.string = strdup(yytext); return FLOAT; }
"string"  	{CONCAT yylval.string = strdup(yytext); return STRING; }
"bool"  	{CONCAT yylval.string = strdup(yytext); return BOOL; }

 /* boolean Keywords */
"true"      {CONCAT return TRUE; }
"false"     {CONCAT return FALSE; }
"return"    {CONCAT return RET; }

 /* String Constant */
\"				{CONCAT BEGIN STRING_STATE; }
<STRING_STATE>\"		{CONCAT BEGIN INITIAL; }
<STRING_STATE>[^"]*		{CONCAT return S_CONST; }

 /* Number Constant */
{integer}   {CONCAT return I_CONST; }
{float}	    {CONCAT return F_CONST; }

 /* C type Comment */
"/*"			{CONCAT BEGIN COMMENT; }
<COMMENT>[^*\n]+	{CONCAT }
<COMMENT>\n		{CONCAT }
<COMMENT>"*"		{CONCAT }
<COMMENT>"*/"		{CONCAT BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{CONCAT  }

 /* Variable ID */
 {id}       {CONCAT yylval.string = strdup(yytext); return ID; }

 /* others */

[;]         {CONCAT return SEMICOLON; }
[\n]        {CONCAT printf("%s",buf); buf[0] = '\0'; }
[ \t]	    {CONCAT } /* Ignore */
[^ \t\n]    {CONCAT } /* Ignore other charactor sets */
<<EOF>>     {return 0; }

%%

int yywrap()
{
    return 1;
}
